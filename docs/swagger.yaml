openapi: 3.0.3

info:
  title: TOKO-ENCOUNT
  version: 0.0.1
  description:  TOKO-ENCOUNT API

servers:
  - url: http://localhost:3050

paths:
  '/api/login':
    post:
      summary: ログイン
      operationId: postLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSimple"
      responses:
        '200':
          description: ログインに成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPass"

  '/api/logout':
    post:
      summary: ログアウト
      operationId: postLogout
      responses:
        '200':
          description: ログアウトに成功しました
  
  '/api/delete':
    delete:
      summary: 退会
      operationId: deleteMe
      responses:
        '200':
          description: 退会しました

  '/api/ws':
    get:
      summary: WebSocket通知ストリームに接続
      operationId: getWs
      description: |-
        新着メッセージ通知の形式

        `message`には、Message構造体が入る
        ```json
        {"type": "NEW_MESSAGE", "body": { roomId: "hoge", message: {...} }}
        ```
      responses:
        '101':
          description: Switching Protocols
  
  '/api/check':
    post:
      summary: ユーザーがすでに存在するか
      operationId: getUserPresent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSimple"
      responses:
        '200':
          description: すでにユーザーが存在します
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPass"
  
  '/api/restore':
    post:
      summary: ユーザーを復活させる
      operationId: restoreUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: ユーザーを復活させました

  '/api/user':
    post:
      tags:
        - user
      summary: アカウント作成
      operationId: postUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: アカウント作成に成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPass"
    get:
      tags:
        - user
      summary: ユーザー検索
      operationId: getUsers
      parameters:
        - name: limit
          in: query
          description: 取得するユーザーの最大数
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: 何件目のユーザーから取得するか
          schema:
            type: integer
            default: 0
        - name: name
          in: query
          description: ユーザーの名前で検索
          schema:
            type: string
        - name: gender
          in: query
          description: ユーザーの性別で検索
          schema:
            type: string
        - name: prefect
          in: query
          description: ユーザーの都道府県で検索
          schema:
            type: string
      responses:
        '200':
          description: 取得できたユーザー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"

  '/api/user/me':
    get:
      tags:
        - user
      summary: 自分のユーザー情報を取得
      operationId: getUserMe
      responses:
        '200':
          description: アカウント情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPass"
    patch:
      tags:
        - user
      summary: プロフィール編集
      operationId: patchUserMe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        '200':
          description: プロフィール編集に成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithoutPass"

  '/api/chat':
    get:
      tags:
        - chat
      summary: 参加中のチャット一覧を表示
      operationId: getChat
      parameters:
        - name: limit
          in: query
          description: 取得するチャットの最大数
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: 何件目のチャットから取得するか
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: チャット情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatList"
    post:
      tags:
        - chat
      summary: 新規にプライベートルームを作成
      operationId: createChat
      parameters:
        - name: did
          in: query
          required: true
          description: トーク相手のユーザーID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: メッセージ情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatData"

  /api/chat/{rid}:
    get:
      tags:
        - chat
      summary: ridのルーム内のメッセージを取得
      operationId: getChatMessages
      parameters:
        - name: rid
          in: path
          required: true
          description: ルームID(全体チャットは0)
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: 取得するメッセージの最大数
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: 何件目のメッセージから取得するか
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: メッセージ情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageList"
    post:
      tags:
        - chat
      summary: ridにメッセージを送信
      operationId: postChat
      parameters:
        - name: rid
          in: path
          required: true
          description: ルームID(全体チャットは0)
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post:
                  type: string
      responses:
        '200':
          description: メッセージ送信に成功しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  
  /api/chat/{rid}/name:  
    get:
      tags:
        - chat
      summary: ridのルーム名を取得
      operationId: getRoomName
      parameters:
        - name: rid
          in: path
          required: true
          description: ルームID(全体チャットは0)
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: ルーム名取得
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomInfo"
    post:
      tags:
        - chat
      summary: ridのルーム名を変更
      operationId: editRoomName
      parameters:
        - name: rid
          in: path
          required: true
          description: ルームID(全体チャットは0)
          schema:
            type: string
            format: uuid
        - name: newName
          in: query
          required: true
          description: 新規の名前
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 新規のルームメイトIDを取得
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatData"
      
  /api/chat/{rid}/add:  
    post:
      tags:
        - chat
      summary: ridにメンバーを追加
      operationId: addChat
      parameters:
        - name: rid
          in: path
          required: true
          description: ルームID(全体チャットは0)
          schema:
            type: string
            format: uuid
        - name: username
          in: query
          required: true
          description: 追加相手のユーザーネーム
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: メンバーを追加しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatData"
                
components:
  schemas:
    User:
      type: object
      properties:
        userName:
          type: string
          example: testUserName
        password:
          type: string
          example: "********"
        prefect:
          type: string
          example: 東京都
        gender:
          type: string
          example: male
      required:
        - userName
        - password
        - prefect
        - gender

    UserUpdate:
      type: object
      properties:
        userName:
          type: string
          example: testUserName
        password:
          type: string
          example: "********"
        newPassword:
          type: string
          example: "********"
        prefect:
          type: string
          example: 東京都
        gender:
          type: string
          example: male
      required:
        - userName
        - password
        - newPassword
        - prefect
        - gender

    UserSimple:
      type: object
      properties:
        userName:
          type: string
          example: testUserName
        password:
          type: string
          example: "********"
      required:
        - userName
        - password

    UserWithoutPass:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        userName:
          type: string
          example: testUserName
        prefect:
          type: string
          example: 東京都
        gender:
          type: string
          example: male
      required:
        - userId
        - userName
        - prefect
        - gender

    UserList:
      type: object
      properties:
        hasNext:
          type: boolean
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserWithoutPass"
      required:
        - hasNext
        - users

    Message:
      type: object
      properties:
        chatId:
          type: string
          format: uuid
        post:
          type: string
          example: hello
        postUserId:
          type: string
          format: uuid
        userName:
          type: string
          example: testUserName
        createdAt:
          type: string
          format: date-time
      required:
        - chatId
        - post
        - postUserId
        - userName
        - createdAt

    MessageList:
      type: object
      properties:
        hasNext:
          type: boolean
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Message"
      required:
        - hasNext
        - messages

    ChatData:
      type: object
      properties:
        roomId:
          type: string
        name:
          type: string
        latestMessage:
          $ref: "#/components/schemas/Message"
        newMessageCount:
          type: integer
      required:
        - roomId
        - name
        - latestMessage
        - newMessageCount
    
    RoomInfo:
      type: object
      properties:
        roomId:
          type: string
        roomName:
          type: string
      required:
        - roomId
        - roomName

    ChatList:
      type: object
      properties:
        hasNext:
          type: boolean
        chats:
          type: array
          items:
            $ref: "#/components/schemas/ChatData"
      required:
        - hasNext
        - chats